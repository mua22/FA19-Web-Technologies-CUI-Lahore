{"version":3,"sources":["store/actions/todo_actions.js","TodoApp/ShowTodo.jsx","TodoApp/AddNewTodo.jsx","TodoApp/App.jsx","serviceWorker.js","store/reducer/todo_reducer.js","store/store.js","index.js"],"names":["ADD_TODO","DELETE_TODO","SWITCH_TODO","SET_FILTER","SHOW_ALL","COMPLETED","NOT_COMPLETED","setFilter","filter","window","store","dispatch","type","allActions","connect","state","_ref","todos","filtered","todo","status","filterTodo","react_default","a","createElement","className","onClick","map","index","key","style","textDecoration","text","index_es","color","fontSize","toggleTodo","icon","faCheck","faTimes","removeTodo","AddNewTodo","hanldeSubmit","e","preventDefault","_this","setState","hanldeChange","target","value","onSubmit","this","placeholder","onChange","Component","TodoApp","props","Fragment","TodoApp_AddNewTodo","TodoApp_ShowTodo","Boolean","location","hostname","match","initialState","createStore","arguments","length","undefined","action","produce","draftState","push","splice","ReactDOM","render","es","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.250e84ad.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\"\r\nexport const DELETE_TODO = \"DELETE_TODO\"\r\nexport const SWITCH_TODO = \"SWITCH_TODO\"\r\nexport const SET_FILTER = \"SET_FILTER\"\r\nexport const SHOW_ALL = \"SHOW_ALL\"\r\nexport const COMPLETED = \"COMPLETED\"\r\nexport const NOT_COMPLETED = \"NOT_COMPLETED\"","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes, faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport * as allActions from \"./../store/actions/todo_actions\";\r\nconst ShowTodo = ({ todos, filter }) => {\r\n  const filtered = filterTodo(todos, filter);\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"btn-group float-left\">\r\n        <button\r\n          className=\"btn btn-sm btn-primary\"\r\n          onClick={() => setFilter(allActions.SHOW_ALL)}\r\n        >\r\n          Show All\r\n        </button>\r\n        <button\r\n          className=\"btn btn-sm btn-danger\"\r\n          onClick={() => setFilter(allActions.COMPLETED)}\r\n        >\r\n          Completed\r\n        </button>\r\n        <button\r\n          onClick={() => setFilter(allActions.NOT_COMPLETED)}\r\n          className=\"btn btn-sm btn-dark\"\r\n        >\r\n          Not Completed\r\n        </button>\r\n      </div>\r\n      <p className=\"float-right\">{filter + \" Todos \"}</p>\r\n      <table className=\"table table-dark  table-bordered table-collapsed text-center\">\r\n        <thead>\r\n          <tr>\r\n            <th>SR</th>\r\n            <th>TODO </th>\r\n            <th>STATUS</th>\r\n            <th>Remove Todo</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filtered.map((todo, index) => {\r\n            return (\r\n              <tr key={index}>\r\n                <td>{index + 1}</td>\r\n                <td\r\n                  style={{ textDecoration: todo.status ? \"line-through\" : \"\" }}\r\n                >\r\n                  {todo.text}\r\n                </td>\r\n                <td>\r\n                  <FontAwesomeIcon\r\n                    style={{ color: \"lightgreen\", fontSize: \"25px\" }}\r\n                    onClick={() => toggleTodo(index)}\r\n                    icon={todo.status ? faCheck : faTimes}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    onClick={() => removeTodo(index)}\r\n                    className=\"btn btn-danger\"\r\n                  >\r\n                    Remove Todo\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\nfunction removeTodo(index) {\r\n  window.store.dispatch({\r\n    type: allActions.DELETE_TODO,\r\n    index\r\n  });\r\n}\r\n\r\nfunction toggleTodo(index) {\r\n  window.store.dispatch({\r\n    type: allActions.SWITCH_TODO,\r\n    index: index\r\n  });\r\n}\r\nfunction setFilter(filter) {\r\n  window.store.dispatch({\r\n    type: allActions.SET_FILTER,\r\n    filter\r\n  });\r\n}\r\n\r\nfunction filterTodo(todos, filter) {\r\n  switch (filter) {\r\n    case allActions.SHOW_ALL:\r\n      return todos;\r\n    case allActions.COMPLETED:\r\n      return todos.filter(todo => todo.status);\r\n    case allActions.NOT_COMPLETED:\r\n      return todos.filter(todo => !todo.status);\r\n    default:\r\n      return todos;\r\n  }\r\n}\r\nconst mapStateToProps = state => state;\r\n// Can Also Be Written as\r\n// const mapStateToProps = state => {\r\n//   return state;\r\n// };\r\n\r\nexport default connect(mapStateToProps)(ShowTodo);\r\n","import React, { Component } from \"react\";\r\nimport * as allActions from \"./../store/actions/todo_actions\";\r\nclass AddNewTodo extends Component {\r\n  state = { text: \"\" };\r\n  hanldeSubmit = e => {\r\n    e.preventDefault();\r\n    window.store.dispatch({\r\n      type: allActions.ADD_TODO,\r\n      todo: { text: this.state.text, status: false }\r\n    });\r\n    this.setState({ text: \"\" });\r\n  };\r\n  hanldeChange = e => {\r\n    this.setState({ text: e.target.value });\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.hanldeSubmit} className=\"text-center\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"ml-auto mr-auto mt-2 mb-2 form-control col-3\"\r\n          placeholder=\"Enter A Todo\"\r\n          onChange={this.hanldeChange}\r\n          value={this.state.text}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddNewTodo;\r\n","import React from \"react\";\r\nimport ShowTodo from \"./ShowTodo\";\r\nimport AddNewTodo from \"./AddNewTodo\";\r\n\r\nconst TodoApp = props => {\r\n  return (\r\n    <>\r\n      <AddNewTodo />\r\n      <ShowTodo />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as allActions from \"./../actions/todo_actions\"\r\nimport {\r\n    produce\r\n} from \"immer\"\r\n\r\nconst initialState = {\r\n    todos: [{\r\n        text: \"Pakistan Zindabad\",\r\n        status: true\r\n    }],\r\n    filter: allActions.SHOW_ALL\r\n}\r\n\r\nexport function todoReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case allActions.ADD_TODO:\r\n            return produce(state, draftState => {\r\n                draftState.todos.push(action.todo)\r\n            })\r\n        case allActions.SET_FILTER:\r\n            return produce(state, draftState => {\r\n                draftState.filter = action.filter\r\n            })\r\n        case allActions.SWITCH_TODO:\r\n            return produce(state, draftState => {\r\n                draftState.todos[action.index].status = !draftState.todos[action.index].status\r\n            })\r\n        case allActions.DELETE_TODO:\r\n            return produce(state, draftState => {\r\n                draftState.todos.splice(action.index, 1);\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}"," import {\r\n     todoReducer\r\n } from \"./reducer/todo_reducer\"\r\n import {\r\n     createStore\r\n } from \"redux\"\r\n\r\n\r\n export const store = createStore(todoReducer);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport TodoApp from \"./TodoApp/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\nwindow.store = store;\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}